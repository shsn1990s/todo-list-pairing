# {{PROBLEM}} Class Design Recipe
## 1. Describe the Problem
> As a user i want to create a TodoList class that I can add entries to.
> So that I can mark and display all entries as complete and incomplete.
> I want to be able to make all as complete in one method. 


## 2. Design the Class Signature


```ruby
class TodoList
  def initialize
  end

  def add(todo) # todo is an instance of Todo
    # Returns nothing
  end

  def incomplete
    # Returns all non-done todos
  end

  def complete
    # Returns all complete todos
  end

  def give_up!
    # Marks all todos as complete
  end
end

# File: lib/todo.rb
class Todo
  def initialize(task) # task is a string
    # ...
  end

  def task
    # Returns the task as a string
  end

  def mark_done!
    # Marks the todo as done
    # Returns nothing
  end

  def done?
    # Returns true if the task is done
    # Otherwise, false
  end
end

```

## 3. Create Examples as Tests

_Make a list of examples of what the method will take and return._

```ruby

# 1
my_todo_list = TodoList.new
todo_entry = Todo.new("task_1")
my_todo_list.add(todo_entry)
my_todo_list.complete # => []


# 2
my_todo_list = TodoList.new
todo_entry = Todo.new("task_1")
my_todo_list.add(todo_entry)
my_todo_list.incomplete # => [todo_entry]

# 3 
my_todo_list = TodoList.new
todo_entry = Todo.new("task_1")
todo_entry2 = Todo.new("task_2")
todo_entry3 = Todo.new("task_3")
my_todo_list.add(todo_entry)
my_todo_list.add(todo_entry2)
my_todo_list.add(todo_entry3)
my_todo_list.give_up!
my_todo_list.complete # => [todo_entry, todo_entry2, todo_entry3]

# 4
todo_entry = Todo.new("task_1")
todo_entry.task # => "task_1"

# 5
todo_entry = Todo.new("task_1")
todo_entry.done? # => false

# 6
todo_entry = Todo.new("task_1")
todo_entry.mark_done! 
todo_entry.done? # => true
```


_Encode each example as a test. You can add to the above list as you go._

## 4. Implement the Behaviour

_After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.